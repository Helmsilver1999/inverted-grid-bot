import asyncio
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from datetime import datetime
import json
import hmac
import hashlib
import requests
from urllib.parse import urlencode
import math

class BinanceFuturesAPI:
    def __init__(self, api_key, api_secret, testnet=True):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = 'https://testnet.binancefuture.com' if testnet else 'https://fapi.binance.com'
        self.session = requests.Session()
        self.session.headers.update({'X-MBX-APIKEY': api_key})
    
    def _generate_signature(self, params):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        query_string = urlencode(params)
        return hmac.new(
            self.api_secret.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _request(self, method, endpoint, params=None, signed=False):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.base_url}{endpoint}"
        
        if params is None:
            params = {}
        
        if signed:
            params['timestamp'] = int(time.time() * 1000)
            params['signature'] = self._generate_signature(params)
        
        try:
            if method == 'GET':
                response = self.session.get(url, params=params)
            elif method == 'POST':
                response = self.session.post(url, params=params)
            elif method == 'DELETE':
                response = self.session.delete(url, params=params)
            
            if response.status_code != 200:
                try:
                    error_data = response.json()
                    error_msg = f"Binance API Error {error_data.get('code', 'Unknown')}: {error_data.get('msg', 'Unknown error')}"
                    raise Exception(error_msg)
                except json.JSONDecodeError:
                    response.raise_for_status()
            
            return response.json()
        except requests.exceptions.RequestException as e:
            raise Exception(f"API –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    def get_exchange_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ"""
        return self._request('GET', '/fapi/v1/exchangeInfo')
    
    def get_symbol_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞"""
        return self._request('GET', '/fapi/v1/ticker/price', {'symbol': symbol})
    
    def get_account_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        return self._request('GET', '/fapi/v2/account', signed=True)
    
    def get_position_info(self, symbol=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
        params = {}
        if symbol:
            params['symbol'] = symbol
        return self._request('GET', '/fapi/v2/positionRisk', params, signed=True)
    
    def change_leverage(self, symbol, leverage):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞"""
        params = {
            'symbol': symbol,
            'leverage': leverage
        }
        return self._request('POST', '/fapi/v1/leverage', params, signed=True)
    
    def change_position_mode(self, dualSidePosition):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π"""
        params = {
            'dualSidePosition': 'true' if dualSidePosition else 'false'
        }
        return self._request('POST', '/fapi/v1/positionSide/dual', params, signed=True)
    
    def place_order(self, symbol, side, order_type, quantity, price=None, stop_price=None, position_side='BOTH'):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        params = {
            'symbol': symbol,
            'side': side,
            'type': order_type,
            'quantity': str(quantity),
            'positionSide': position_side
        }
        
        if order_type in ['LIMIT', 'STOP', 'TAKE_PROFIT']:
            params['timeInForce'] = 'GTC'
        
        if price:
            params['price'] = str(price)
        if stop_price:
            params['stopPrice'] = str(stop_price)
        
        return self._request('POST', '/fapi/v1/order', params, signed=True)
    
    def get_open_orders(self, symbol=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        params = {}
        if symbol:
            params['symbol'] = symbol
        return self._request('GET', '/fapi/v1/openOrders', params, signed=True)
    
    def get_order(self, symbol, order_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ"""
        params = {
            'symbol': symbol,
            'orderId': order_id
        }
        return self._request('GET', '/fapi/v1/order', params, signed=True)
    
    def cancel_order(self, symbol, order_id):
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        params = {
            'symbol': symbol,
            'orderId': order_id
        }
        return self._request('DELETE', '/fapi/v1/order', params, signed=True)
    
    def cancel_all_orders(self, symbol):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        params = {
            'symbol': symbol
        }
        return self._request('DELETE', '/fapi/v1/allOpenOrders', params, signed=True)


class InvertedGridBot:
    def __init__(self):
        self.api = None
        self.is_running = False
        self.grid_levels = []
        self.active_orders = {}  # order_id -> order_info
        self.grid_orders = {}    # price_level -> order_id
        self.positions = {}      # price_level -> position_info
        self.symbol = ''
        self.leverage = 1
        self.total_capital = 0
        self.tick_size = 0.01
        self.min_qty = 0.001
        self.mark_price = 0
        self.monitoring_thread = None
        self.log_callback = None
        
        # API –∫–ª—é—á–∏ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ GUI
        self.API_KEY = ""
        self.API_SECRET = ""
    
    def set_log_callback(self, callback):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log_callback = callback
    
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        if self.log_callback:
            self.log_callback(log_message)
    
    def initialize_api(self, api_key, api_secret, testnet=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API"""
        try:
            self.API_KEY = api_key
            self.API_SECRET = api_secret
            self.api = BinanceFuturesAPI(self.API_KEY, self.API_SECRET, testnet)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            account_info = self.api.get_account_info()
            self.log("‚úÖ API —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                self.api.change_position_mode(True)
                self.log("‚úÖ –†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ")
            except Exception as e:
                if "No need to change position side" in str(e):
                    self.log("‚ÑπÔ∏è –†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ")
                else:
                    self.log(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            
            return True
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
    
    def get_symbol_info(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ"""
        try:
            exchange_info = self.api.get_exchange_info()
            symbol_info = None
            
            for s in exchange_info['symbols']:
                if s['symbol'] == symbol:
                    symbol_info = s
                    break
            
            if not symbol_info:
                raise Exception(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            for filter_info in symbol_info['filters']:
                if filter_info['filterType'] == 'PRICE_FILTER':
                    self.tick_size = float(filter_info['tickSize'])
                elif filter_info['filterType'] == 'LOT_SIZE':
                    self.min_qty = float(filter_info['minQty'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price_info = self.api.get_symbol_price(symbol)
            self.mark_price = float(price_info['price'])
            
            self.log(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {symbol}: —Ü–µ–Ω–∞={self.mark_price}, tick_size={self.tick_size}, min_qty={self.min_qty}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {e}")
            return False
    
    def round_to_tick_size(self, price):
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–æ tick_size"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ tick_size
        tick_str = f"{self.tick_size:.10f}".rstrip('0')
        if '.' in tick_str:
            decimals = len(tick_str.split('.')[1])
        else:
            decimals = 0
        
        # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É
        rounded = round(price / self.tick_size) * self.tick_size
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤
        return round(rounded, decimals)
    
    def round_to_min_qty(self, qty):
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ min_qty"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è min_qty
        decimals = 0
        temp = self.min_qty
        while temp < 1:
            temp *= 10
            decimals += 1
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
        factor = 10 ** decimals
        return math.floor(qty * factor) / factor
    
    def calculate_grid_levels(self, lower_bound, upper_bound, grid_count, total_capital):
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏"""
        step = (upper_bound - lower_bound) / grid_count
        levels = []
        capital_per_level = total_capital / (grid_count + 1)
        
        self.log(f"üìà –†–∞—Å—á–µ—Ç —Å–µ—Ç–∫–∏:")
        self.log(f"  - –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_capital}")
        self.log(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π: {grid_count + 1}")
        self.log(f"  - –ö–∞–ø–∏—Ç–∞–ª –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: ${capital_per_level:.2f}")
        self.log(f"  - –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: {self.leverage}x")
        self.log(f"  - –®–∞–≥ —Å–µ—Ç–∫–∏: ${step:.5f}")
        
        for i in range(grid_count + 1):
            price = upper_bound - (i * step)  # –û—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
            price = self.round_to_tick_size(price)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏
            quantity = (capital_per_level * self.leverage) / price
            quantity = self.round_to_min_qty(quantity)
            
            if quantity >= self.min_qty:
                # –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ 20% –æ—Ç —à–∞–≥–∞ –≤—ã—à–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                stop_loss = self.round_to_tick_size(price + (step * 0.2))
                levels.append({
                    'price': price,
                    'quantity': quantity,
                    'capital': capital_per_level,
                    'stop_loss': stop_loss,
                    'step_size': step
                })
        
        self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(levels)} —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏")
        return levels
    
    async def place_limit_order(self, side, quantity, price, position_side='SHORT'):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ LIMIT –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            formatted_price = f"{price:.5f}".rstrip('0').rstrip('.')
            
            order = self.api.place_order(
                symbol=self.symbol,
                side=side,
                order_type='LIMIT',
                quantity=str(quantity),
                price=formatted_price,
                position_side=position_side
            )
            
            order_id = order['orderId']
            self.active_orders[order_id] = {
                'orderId': order_id,
                'symbol': self.symbol,
                'side': side,
                'type': 'LIMIT',
                'quantity': quantity,
                'price': price,
                'positionSide': position_side,
                'status': 'NEW',
                'time': time.time()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º —Ü–µ–Ω—ã –∏ –æ—Ä–¥–µ—Ä–æ–º
            if side == 'SELL' and position_side == 'SHORT':
                self.grid_orders[price] = order_id
            
            self.log(f"üìù –†–∞–∑–º–µ—â–µ–Ω {side} LIMIT –æ—Ä–¥–µ—Ä: ID={order_id}, –æ–±—ä–µ–º={quantity}, —Ü–µ–Ω–∞={formatted_price}")
            return order
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def place_stop_market_order(self, side, quantity, stop_price, position_side='SHORT'):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ STOP_MARKET –æ—Ä–¥–µ—Ä–∞"""
        try:
            formatted_price = f"{stop_price:.5f}".rstrip('0').rstrip('.')
            
            order = self.api.place_order(
                symbol=self.symbol,
                side=side,
                order_type='STOP_MARKET',
                quantity=str(quantity),
                stop_price=formatted_price,
                position_side=position_side
            )
            
            order_id = order['orderId']
            self.active_orders[order_id] = {
                'orderId': order_id,
                'symbol': self.symbol,
                'side': side,
                'type': 'STOP_MARKET',
                'quantity': quantity,
                'stopPrice': stop_price,
                'positionSide': position_side,
                'status': 'NEW',
                'time': time.time()
            }
            
            self.log(f"üõ°Ô∏è –†–∞–∑–º–µ—â–µ–Ω STOP-LOSS: ID={order_id}, –æ–±—ä–µ–º={quantity}, —Å—Ç–æ–ø-—Ü–µ–Ω–∞={formatted_price}")
            return order
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def check_and_restore_grid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price_info = self.api.get_symbol_price(self.symbol)
            current_price = float(price_info['price'])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions_info = self.api.get_position_info(self.symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = self.api.get_open_orders(self.symbol)
            open_order_ids = {order['orderId'] for order in open_orders}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            for order_id, order_info in list(self.active_orders.items()):
                if order_id not in open_order_ids:
                    # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                    try:
                        order_status = self.api.get_order(self.symbol, order_id)
                        
                        if order_status['status'] == 'FILLED':
                            # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
                            if order_info['type'] == 'LIMIT' and order_info['side'] == 'SELL':
                                # –í—Ö–æ–¥–Ω–æ–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω - –æ—Ç–∫—Ä—ã—Ç–∞ SHORT –ø–æ–∑–∏—Ü–∏—è
                                entry_price = order_info['price']
                                quantity = order_info['quantity']
                                
                                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ç–∫–∏
                                level = next((l for l in self.grid_levels if abs(l['price'] - entry_price) < self.tick_size), None)
                                if level:
                                    # –ù–ï —Å—Ç–∞–≤–∏–º —Å—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–∑—É - –∂–¥–µ–º –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è
                                    self.log(f"üéØ –û—Ç–∫—Ä—ã—Ç SHORT –Ω–∞ {entry_price}, —Å—Ç–æ–ø-–ª–æ—Å—Å –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                                    self.positions[entry_price] = {
                                        'entry_price': entry_price,
                                        'quantity': quantity,
                                        'stop_loss': level['stop_loss'],
                                        'stop_loss_placed': False,
                                        'time': time.time()
                                    }
                                    
                                    # –£–¥–∞–ª—è–µ–º –∏–∑ grid_orders
                                    if entry_price in self.grid_orders:
                                        del self.grid_orders[entry_price]
                            
                            elif order_info['type'] == 'STOP_MARKET' and order_info['side'] == 'BUY':
                                # –°—Ç–æ–ø-–ª–æ—Å—Å –∏—Å–ø–æ–ª–Ω–µ–Ω - –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                                # –ù–∞—Ö–æ–¥–∏–º, –∫–∞–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞
                                closed_position = None
                                for price, pos in self.positions.items():
                                    if 'actual_stop_loss' in pos and abs(pos['actual_stop_loss'] - order_info['stopPrice']) < self.tick_size:
                                        closed_position = price
                                        break
                                
                                if closed_position:
                                    self.log(f"üí• –°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ {order_info['stopPrice']}, –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                                    
                                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
                                    if closed_position not in self.grid_orders:
                                        level = next((l for l in self.grid_levels if abs(l['price'] - closed_position) < self.tick_size), None)
                                        if level and level['price'] < current_price:
                                            await self.place_limit_order('SELL', level['quantity'], level['price'], 'SHORT')
                                            self.log(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ç–∫–∏ –Ω–∞ {level['price']}")
                                    
                                    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–∑–∏—Ü–∏–π
                                    del self.positions[closed_position]
                    
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    del self.active_orders[order_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            for entry_price, pos_info in list(self.positions.items()):
                if not pos_info.get('stop_loss_placed', False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ —Ü–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                    # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –∂–¥–µ–º, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –±–ª–∏–∑–∫–æ –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
                    if current_price >= entry_price:
                        # –¶–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ - –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å
                        stop_loss_price = pos_info['stop_loss']
                        if current_price < stop_loss_price - self.tick_size * 10:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                            await self.place_stop_market_order('BUY', pos_info['quantity'], stop_loss_price, 'SHORT')
                            self.log(f"üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π SL –¥–ª—è SHORT {entry_price} –Ω–∞ —É—Ä–æ–≤–Ω–µ {stop_loss_price}")
                            pos_info['stop_loss_placed'] = True
                            pos_info['actual_stop_loss'] = stop_loss_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—Ä–æ–≤–Ω–∏ —Å–µ—Ç–∫–∏ –ø–æ–∫—Ä—ã—Ç—ã –æ—Ä–¥–µ—Ä–∞–º–∏
            for level in self.grid_levels:
                if level['price'] < current_price and level['price'] not in self.grid_orders and level['price'] not in self.positions:
                    # –£—Ä–æ–≤–µ–Ω—å –Ω–µ –ø–æ–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä–æ–º –∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    await self.place_limit_order('SELL', level['quantity'], level['price'], 'SHORT')
                    self.log(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ {level['price']}")
                        
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏: {e}")
    
    def monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        while self.is_running:
            try:
                loop.run_until_complete(self.check_and_restore_grid())
                time.sleep(3)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
        
        loop.close()
    
    async def start(self, config):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.symbol = config['symbol']
            self.leverage = config['leverage']
            self.total_capital = config['total_capital']
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            if not self.initialize_api(config['api_key'], config['api_secret'], config['testnet']):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
            if not self.get_symbol_info(self.symbol):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ
            try:
                self.api.change_leverage(self.symbol, self.leverage)
                self.log(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: {self.leverage}x")
            except Exception as e:
                self.log(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å–µ—Ç–∫–∏
            self.grid_levels = self.calculate_grid_levels(
                config['lower_bound'],
                config['upper_bound'],
                config['grid_count'],
                config['total_capital']
            )
            
            if not self.grid_levels:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–≤–Ω–∏ —Å–µ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            
            self.log(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(self.grid_levels)} —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏")
            
            # –†–∞–∑–º–µ—â–∞–µ–º LIMIT –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            placed_count = 0
            for level in self.grid_levels:
                if level['price'] < self.mark_price:
                    # –†–∞–∑–º–µ—â–∞–µ–º LIMIT SELL –æ—Ä–¥–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                    await self.place_limit_order('SELL', level['quantity'], level['price'], 'SHORT')
                    placed_count += 1
                else:
                    self.log(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å {level['price']} (–≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã {self.mark_price})")
            
            if placed_count == 0:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞. –í—Å–µ —É—Ä–æ–≤–Ω–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã.")
            
            self.log(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ {placed_count} –≤—Ö–æ–¥–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitoring_thread = threading.Thread(target=self.monitoring_loop)
            self.monitoring_thread.daemon = True
            self.monitoring_thread.start()
            
            self.log("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            self.log("‚ÑπÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        try:
            self.api.cancel_all_orders(self.symbol)
            self.log("üö´ –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –æ—Ä–¥–µ—Ä–∞")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=5)
        
        self.log("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.log(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.positions)}")


class GridBotGUI:
    def __init__(self):
        self.bot = InvertedGridBot()
        self.bot.set_log_callback(self.add_log)
        
        self.root = tk.Tk()
        self.root.title("Inverted Long Grid Bot - SHORT –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏")
        self.root.geometry("800x900")
        self.root.configure(bg='#2b2b2b')
        
        self.create_widgets()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.root,
            text="Inverted Long Grid Bot - SHORT",
            font=('Arial', 18, 'bold'),
            bg='#2b2b2b',
            fg='#ff6b6b'
        )
        title_label.pack(pady=10)
        
        info_label = tk.Label(
            self.root,
            text="–ë–æ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç SHORT –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã",
            font=('Arial', 10),
            bg='#2b2b2b',
            fg='#ffffff'
        )
        info_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#2b2b2b')
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_frame = tk.LabelFrame(main_frame, text="API –ù–∞—Å—Ç—Ä–æ–π–∫–∏", bg='#3b3b3b', fg='#ffffff', font=('Arial', 10, 'bold'))
        api_frame.pack(fill='x', pady=5)
        
        tk.Label(api_frame, text="API Key:", bg='#3b3b3b', fg='#ffffff').grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.api_key_var = tk.StringVar()
        api_key_entry = tk.Entry(api_frame, textvariable=self.api_key_var, bg='#4b4b4b', fg='#ffffff', width=50)
        api_key_entry.grid(row=0, column=1, columnspan=3, sticky='ew', padx=5, pady=5)
        
        tk.Label(api_frame, text="API Secret:", bg='#3b3b3b', fg='#ffffff').grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.api_secret_var = tk.StringVar()
        api_secret_entry = tk.Entry(api_frame, textvariable=self.api_secret_var, bg='#4b4b4b', fg='#ffffff', width=50, show='*')
        api_secret_entry.grid(row=1, column=1, columnspan=3, sticky='ew', padx=5, pady=5)
        
        tk.Label(api_frame, text="–†–µ–∂–∏–º:", bg='#3b3b3b', fg='#ffffff').grid(row=2, column=0, sticky='w', padx=5, pady=5)
        self.testnet_var = tk.BooleanVar(value=False)
        mainnet_radio = tk.Radiobutton(api_frame, text="Mainnet", variable=self.testnet_var, value=False, bg='#3b3b3b', fg='#ffffff', selectcolor='#2b2b2b')
        mainnet_radio.grid(row=2, column=1, sticky='w', padx=5, pady=5)
        testnet_radio = tk.Radiobutton(api_frame, text="Testnet", variable=self.testnet_var, value=True, bg='#3b3b3b', fg='#ffffff', selectcolor='#2b2b2b')
        testnet_radio.grid(row=2, column=2, sticky='w', padx=5, pady=5)
        
        api_frame.columnconfigure(1, weight=1)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_frame = tk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏", bg='#3b3b3b', fg='#ffffff', font=('Arial', 10, 'bold'))
        trading_frame.pack(fill='x', pady=5)
        
        tk.Label(trading_frame, text="–°–∏–º–≤–æ–ª:", bg='#3b3b3b', fg='#ffffff').grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.symbol_var = tk.StringVar(value="DOGEUSDT")
        symbol_entry = tk.Entry(trading_frame, textvariable=self.symbol_var, bg='#4b4b4b', fg='#ffffff')
        symbol_entry.grid(row=0, column=1, sticky='ew', padx=5, pady=5)
        
        tk.Label(trading_frame, text="–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ:", bg='#3b3b3b', fg='#ffffff').grid(row=0, column=2, sticky='w', padx=5, pady=5)
        self.leverage_var = tk.IntVar(value=10)
        leverage_entry = tk.Entry(trading_frame, textvariable=self.leverage_var, bg='#4b4b4b', fg='#ffffff')
        leverage_entry.grid(row=0, column=3, sticky='ew', padx=5, pady=5)
        
        tk.Label(trading_frame, text="–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª (USDT):", bg='#3b3b3b', fg='#ffffff').grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.capital_var = tk.DoubleVar(value=100)
        capital_entry = tk.Entry(trading_frame, textvariable=self.capital_var, bg='#4b4b4b', fg='#ffffff')
        capital_entry.grid(row=1, column=1, sticky='ew', padx=5, pady=5)
        
        trading_frame.columnconfigure(1, weight=1)
        trading_frame.columnconfigure(3, weight=1)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
        grid_frame = tk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏", bg='#3b3b3b', fg='#ffffff', font=('Arial', 10, 'bold'))
        grid_frame.pack(fill='x', pady=5)
        
        tk.Label(grid_frame, text="–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞:", bg='#3b3b3b', fg='#ffffff').grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.lower_bound_var = tk.DoubleVar(value=0.20)
        lower_entry = tk.Entry(grid_frame, textvariable=self.lower_bound_var, bg='#4b4b4b', fg='#ffffff')
        lower_entry.grid(row=0, column=1, sticky='ew', padx=5, pady=5)
        
        tk.Label(grid_frame, text="–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞:", bg='#3b3b3b', fg='#ffffff').grid(row=0, column=2, sticky='w', padx=5, pady=5)
        self.upper_bound_var = tk.DoubleVar(value=0.25)
        upper_entry = tk.Entry(grid_frame, textvariable=self.upper_bound_var, bg='#4b4b4b', fg='#ffffff')
        upper_entry.grid(row=0, column=3, sticky='ew', padx=5, pady=5)
        
        tk.Label(grid_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–æ–∫:", bg='#3b3b3b', fg='#ffffff').grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.grid_count_var = tk.IntVar(value=10)
        grid_count_entry = tk.Entry(grid_frame, textvariable=self.grid_count_var, bg='#4b4b4b', fg='#ffffff')
        grid_count_entry.grid(row=1, column=1, sticky='ew', padx=5, pady=5)
        
        grid_frame.columnconfigure(1, weight=1)
        grid_frame.columnconfigure(3, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(main_frame, bg='#2b2b2b')
        control_frame.pack(fill='x', pady=10)
        
        self.calculate_btn = tk.Button(
            control_frame, 
            text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ç–∫—É", 
            command=self.calculate_grid,
            bg='#00d4ff', 
            fg='#000000', 
            font=('Arial', 10, 'bold')
        )
        self.calculate_btn.pack(side='left', padx=5)
        
        self.start_btn = tk.Button(
            control_frame, 
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
            command=self.start_bot,
            bg='#4caf50', 
            fg='#ffffff', 
            font=('Arial', 10, 'bold'),
            state='disabled'
        )
        self.start_btn.pack(side='left', padx=5)
        
        self.stop_btn = tk.Button(
            control_frame, 
            text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
            command=self.stop_bot,
            bg='#f44336', 
            fg='#ffffff', 
            font=('Arial', 10, 'bold'),
            state='disabled'
        )
        self.stop_btn.pack(side='left', padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∫–µ
        self.grid_info_frame = tk.LabelFrame(main_frame, text="–£—Ä–æ–≤–Ω–∏ —Å–µ—Ç–∫–∏", bg='#3b3b3b', fg='#ffffff', font=('Arial', 10, 'bold'))
        self.grid_info_frame.pack(fill='both', expand=True, pady=5)
        
        self.grid_text = scrolledtext.ScrolledText(
            self.grid_info_frame, 
            height=8, 
            bg='#4b4b4b', 
            fg='#ffffff',
            font=('Courier', 9)
        )
        self.grid_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –õ–æ–≥
        log_frame = tk.LabelFrame(main_frame, text="–õ–æ–≥", bg='#3b3b3b', fg='#ffffff', font=('Arial', 10, 'bold'))
        log_frame.pack(fill='both', expand=True, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame, 
            height=10, 
            bg='#1a1a1a', 
            fg='#00ff00',
            font=('Courier', 9)
        )
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)
        
    def add_log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, message + '\n')
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def calculate_grid(self):
        """–†–∞—Å—á–µ—Ç —Å–µ—Ç–∫–∏"""
        try:
            lower_bound = self.lower_bound_var.get()
            upper_bound = self.upper_bound_var.get()
            grid_count = self.grid_count_var.get()
            total_capital = self.capital_var.get()
            leverage = self.leverage_var.get()
            
            if lower_bound >= upper_bound:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤–µ—Ä—Ö–Ω–µ–π")
                return
            
            if grid_count < 2:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
            avg_price = (lower_bound + upper_bound) / 2
            min_capital_per_level = (0.001 * avg_price) / leverage  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º * —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ / –ø–ª–µ—á–æ
            min_total_capital = min_capital_per_level * (grid_count + 1)
            
            if total_capital < min_total_capital:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    f"–ö–∞–ø–∏—Ç–∞–ª ${total_capital} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º.\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º: ${min_total_capital:.2f}\n"
                    f"–¥–ª—è {grid_count + 1} —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏ –ø–ª–µ—á–µ {leverage}x"
                )
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ (–±–µ–∑ API)
            step = (upper_bound - lower_bound) / grid_count
            capital_per_level = total_capital / (grid_count + 1)
            
            self.grid_text.delete(1.0, tk.END)
            self.grid_text.insert(tk.END, f"{'‚Ññ':<3} {'–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞':<12} {'–û–±—ä–µ–º':<12} {'–°—Ç–æ–ø-–ª–æ—Å—Å':<12} {'–ö–∞–ø–∏—Ç–∞–ª':<10}\n")
            self.grid_text.insert(tk.END, "-" * 60 + "\n")
            
            valid_levels = 0
            for i in range(grid_count + 1):
                price = upper_bound - (i * step)  # –û—Ç –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
                quantity = (capital_per_level * leverage) / price
                stop_loss = price + (step * 0.2)  # 20% –æ—Ç —à–∞–≥–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                if quantity >= 0.001:
                    valid_levels += 1
                    status = "‚úì"
                else:
                    status = "‚úó"
                
                self.grid_text.insert(
                    tk.END, 
                    f"{status} {i+1:<2} {price:<12.5f} {quantity:<12.6f} {stop_loss:<12.5f} {capital_per_level:<10.2f}\n"
                )
            
            self.grid_text.insert(tk.END, "\n" + "="*60 + "\n")
            self.grid_text.insert(tk.END, "‚ÑπÔ∏è –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n")
            self.grid_text.insert(tk.END, "1. –ü—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è SHORT –ø–æ–∑–∏—Ü–∏—è\n")
            self.grid_text.insert(tk.END, "2. –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞\n")
            self.grid_text.insert(tk.END, "3. –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —É—Ä–æ–≤–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è\n")
            self.grid_text.insert(tk.END, "4. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Å–µ—Ç–∫—É\n")
            
            if valid_levels == 0:
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞", 
                    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª\n"
                    "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ\n"
                    "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–æ–∫\n"
                    "‚Ä¢ –°—É–∑–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω"
                )
                self.start_btn.config(state='disabled')
            else:
                self.start_btn.config(state='normal')
                self.add_log(f"‚úÖ –°–µ—Ç–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {valid_levels} –≤–∞–ª–∏–¥–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑ {grid_count + 1}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–µ—Ç–∫–∏: {e}")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã API –∫–ª—é—á–∏
        api_key = self.api_key_var.get().strip()
        api_secret = self.api_secret_var.get().strip()
        
        if not api_key or not api_secret:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏")
            return
        
        config = {
            'api_key': api_key,
            'api_secret': api_secret,
            'testnet': self.testnet_var.get(),
            'symbol': self.symbol_var.get(),
            'leverage': self.leverage_var.get(),
            'total_capital': self.capital_var.get(),
            'lower_bound': self.lower_bound_var.get(),
            'upper_bound': self.upper_bound_var.get(),
            'grid_count': self.grid_count_var.get()
        }
        
        def run_start():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            success = loop.run_until_complete(self.bot.start(config))
            loop.close()
            
            if success:
                self.root.after(0, lambda: [
                    self.start_btn.config(state='disabled'),
                    self.stop_btn.config(state='normal'),
                    self.calculate_btn.config(state='disabled')
                ])
            
        thread = threading.Thread(target=run_start)
        thread.daemon = True
        thread.start()
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        def run_stop():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.bot.stop())
            loop.close()
            
            self.root.after(0, lambda: [
                self.start_btn.config(state='normal'),
                self.stop_btn.config(state='disabled'),
                self.calculate_btn.config(state='normal')
            ])
        
        thread = threading.Thread(target=run_stop)
        thread.daemon = True
        thread.start()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import requests
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É requests: pip install requests")
        exit(1)
    
    app = GridBotGUI()
    app.run()